#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>
#include <time.h>
#include <sys/resource.h>
#include <sys/time.h>
#include <string>
#include <string.h>
#include <iostream>
#include <stdio.h>
using namespace std;

void displayStats(timeval start, timeval end, rusage usage, rusage before_usage)
{
	long softPF, hardPF;
	double wall_time_passed = (end.tv_sec -start.tv_sec)*1000 + (end.tv_usec - start.tv_usec)/1000;
	double user_time = (usage.ru_utime.tv_sec*1000 + usage.ru_utime.tv_usec/1000);
	double system_time = (usage.ru_stime.tv_sec*1000 + usage.ru_stime.tv_usec/1000);

	softPF = usage.ru_minflt-before_usage.ru_minflt;
	hardPF = usage.ru_majflt-before_usage.ru_majflt;
	
        cout<<"\nPROCESS STATISTICS\n\n";
        
        printf("User Time: %f \n", user_time);
 	printf("System Time: %f \n", system_time);       
 	printf("Wall-Time: %f \n", (wall_time_passed));       
 	printf("Number of times preempted involuntarily: %ld \n", usage.ru_nivcsw - before_usage.ru_nivcsw);       
	printf("Number of times preempted Voluntarily: %ld \n", usage.ru_nvcsw - before_usage.ru_nvcsw);      
        printf("Number of Page Faults: %ld \n", hardPF);
	printf("Number of Page Reclaims: %ld \n", softPF);
	
	cout<<endl;
}


string exec(char* cmd)
{
	//Opens a pipe which allows two processes to communicate

	FILE* pipe = popen(cmd, "r");

	if (!pipe) return "ERROR";

	//Buffer reads from file

	char buffer[128];
	string result = "";

	while(!feof(pipe))
	{
		//Result reads from buffer

		if(fgets(buffer, 128, pipe) != NULL)
			result += buffer;
	}

	//Pipe closed

	pclose(pipe);

	return result;
}

int main(int argc, char *argv[])
{
	int status;
	int who = RUSAGE_CHILDREN;

	struct rusage usage;
	struct rusage before_usage;
	struct timeval start, end;

	string output;
	char new_dir[200];
	char temp1_dir[200], temp2_dir[200];
	int run_exec = 1;
	char input[200]="\0",token[50], check[10],temp[200];
	
	for(int i=1;i<argc;i++)
	{
		strcat(input,argv[i]);
		strcat(input," ");
	}
	
	
	
	begin:
	
	strcpy(temp,input);
	strcpy(token,strtok(temp," "));
	
	if(strcmp(token,"cd")==0)
	{
		run_exec=0;
		strcpy(new_dir,get_current_dir_name());
		strcpy(temp1_dir, new_dir);
		strcpy(token,strtok(NULL," "));
		
		
		if(strcmp(token,"..")==0)
		{
			int len=strlen(new_dir);
			while(new_dir[len-1]!='/')
			{
				len--;
			}
			new_dir[len-1]='\0';
			
			chdir(new_dir);
			cout<<get_current_dir_name()<<endl;
		}		
		else
		{
			strncpy(check,token,6);

			if( (strcmp(check,"/home")==0) || (strcmp(check,"/home/")==0) )
			{
				chdir(token);
				cout<<get_current_dir_name()<<endl;
			}
			else
			{
				strcat(new_dir,"/");
				strcat(new_dir,token);
		
				chdir(new_dir);
				cout<<get_current_dir_name()<<endl;
			}
		}
		
		strcpy(temp2_dir,get_current_dir_name());		
		if(strcmp(temp1_dir, temp2_dir)==0)
			cout<<"Directory not changed\n";
		else
			cout<<"Directory changed\n";
		
		cout<<"\nEnter new command: ";
		cin.getline(input,200,'\n');
		run_exec=1;
		goto begin;
		
	}
				
	if(fork() != 0)
	{
		int start_time = gettimeofday(&start, NULL);
	
		if(run_exec == 1)
		{
			getrusage(who, &before_usage);
    			waitpid(-1, &status, 0);
    			int end_time = gettimeofday(&end, NULL);
    			getrusage(who, &usage);
    			displayStats(start, end, usage, before_usage);
    			
		}
	}

	else
	{
		if(run_exec == 1)
		{
			output = exec(input);
			cout<<endl<<output<<endl;
		}
	}	
		
	return 0;
}
